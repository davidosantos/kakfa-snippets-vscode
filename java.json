{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"kafka-stream-join": {
		"prefix": "kafka-stream-join",
		"body": [
			"${1:Kstream1}.join(${2:Kstream2},",
			"             (left, right) -> new ${JoinWrapperClass}(left, right),",
			"             JoinWindows.of(Duration.ofSeconds(${3:windowSecond})),",
			"             StreamJoined.with(${4:deserializarForKey}, ${5:deserializarLeftValue}, ${6:deserializarRightValue}));"
		],
		"description": "A Sample code for joining Kafka Streams"
	},

	"kafka-stream-print": {
		"prefix": "kafka-stream-print",
		"body": [
			".print(Printed.<String, ${1:PrintObjectClass}>toSysOut().withLabel(\"${2:Label}\"))"
		],
		"description": "A Sample code for printing Kafka Streams"
	},

	"kafka-stream-groupBy": {
		"prefix": "kafka-stream-groupby",
		"body": [
			".groupBy((k,v) -> k,Grouped.with(Serdes.String(), new ${1:serdes}))"
		],
		"description": "A Sample code for grouping Kafka Streams"
	},

	"kafka-stream-peek": {
		"prefix": "kafka-stream-peek",
		"body": [
			".peek((k,v) -> ${1:logger.info(\"key= \" + k + \" value= \" + v))}"
		],
		"description": "A Sample code for peek in Kafka Streams"
	},

	"kafka-stream-map-key-value": {
		"prefix": "kafka-stream-map-key-value",
		"body": [
			".map((k, v) -> KeyValue.pair(${1:key}, ${2:value}))"
		],
		"description": "A Sample code for key-value mapping in Kafka Streams"
	},

	"kafka-stream-aggregate-with-statestore-materialized": {
		"prefix": "kafka-stream-aggregate-with-statestore-materialized",
		"body": [
			".aggregate(",
			"    ${1:initializerClassInstance}::new,",
			"    (key, value, initializedVar) -> initializedVar.${2:mothedName}(key, value),",
			"    Materialized",
			"                  .<${3:TypeClassForKey}, ${4:TypeClassForValue}, KeyValueStore<Bytes, byte[]>>as(",
			"                           \"${5:state-store-name}\")",
			"                    .withKeySerde(${6:Serdes.String()})",
			"                    .withValueSerde(${7:new CustomSerDesForValueClass()}))"
		],
		"description": "A Sample code for Aggregating Kafka Streams with state storage"
	},

	"kafka-stream-aggregate": {
		"prefix": "kafka-stream-aggregate",
		"body": [
			".aggregate(",
			"    ${1:initializerClassInstance}::new,",
		 	"    (key, value, initializedVar) -> initializedVar.${2:mothedName}(key, value),",
		 	"    Materialized.with(Serdes.String(),new ${3:CustomSerDesForValueClass()}))"
		],
		"description": "A Sample code for Aggregating Kafka Streams"
	},

	"kafka-serdes-custom": {
		"prefix": "kafka-serdes-custom",
		"body": [
			"import java.nio.charset.StandardCharsets;",
			"import org.apache.kafka.common.serialization.Deserializer;",
			"import org.apache.kafka.common.serialization.Serde;",
			"import org.apache.kafka.common.serialization.Serializer;",
			" ",
			"import com.google.gson.Gson;",
			" ",
			"public class ${2:ClassNameFile} implements Serde<${1:ClassName}> {",
			" ",
			"   @Override",
			"   public Serializer<${1:ClassName}> serializer() {",
			" ",		
			"       return new SerializerFor${1:ClassName}();",
			"   }",
			" ",
			"   @Override",
			"   public Deserializer<${1:ClassName}> deserializer() {",
			" ",		
			"      return new DeserializerFor${1:ClassName}();",
			"   }",
			" ",
			"   class SerializerFor${1:ClassName} implements Serializer<${1:ClassName}> {",
			" ",
			"       Gson gson = new Gson();",
			" ",
			"       @Override",
			"       public byte[] serialize(String topic, ${1:ClassName} data) {",
			"           if (data == null)",
			"               return null;",
			"           return gson.toJson(data).getBytes(StandardCharsets.UTF_8);",
			"       }",
			"   }",
			" ",
			"   class DeserializerFor${1:ClassName} implements Deserializer<${1:ClassName}> {",
			" ",
			"       Gson gson = new Gson();",
			" ",
			"       @Override",
			"       public ${1:ClassName} deserialize(String topic, byte[] data) {",
			"          if (data == null)",
			"               return null;",
			"           return gson.fromJson(new String(data, StandardCharsets.UTF_8), ${1:ClassName}.class);",
			"       }",
			"   }",
			"}"
		],
		"description": "Create a custom Serdes for for kafka applications"
	},
	"kafka-stream-suppress": {
		"prefix": "kafka-stream-suppress",
		"body": [
			".suppress(",
				"Suppressed.untilTimeLimit(Duration.ofSeconds(${1:seconds}),",
				"BufferConfig.unbounded().emitEarlyWhenFull()))"
		],
		"description": "A Sample code for Suppressed Kafka Streams"
	},
	







	
}